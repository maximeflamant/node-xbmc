// Generated by CoffeeScript 1.4.0
(function() {
  var Media, pubsub;

  pubsub = require('./PubSub');

  Media = (function() {

    function Media() {}

    Media.mixin = function(api) {
      var method, name;
      this.api = api;
      api.media = {};
      for (name in this) {
        method = this[name];
        api.media[name] = method;
      }
      return delete api.media.mixin;
    };

    Media.episode = function(id) {
      var dfd;
      dfd = Media.api.send('VideoLibrary.GetEpisodeDetails', {
        episodeid: id,
        properties: ['title', 'showtitle', 'plot', 'season', 'episode', 'thumbnail']
      });
      return dfd.then(function(data) {
        return pubsub.emit('api:episode', Media.api.scrub(data.result.episodedetails));
      });
    };

    Media.movies = function(options, fn) {
      var args, dfd;
      if (options == null) {
        options = {};
      }
      if (fn == null) {
        fn = null;
      }
      args = {
        properties: options.properties || [],
        sort: options.sort || {},
        limits: options.limits || {}
      };
      dfd = Media.api.send('VideoLibrary.GetMovies', args);
      return dfd.then(function(data) {
        pubsub.emit('api:movies', data.result.movies);
        if (fn) {
          return fn(data);
        }
      });
    };

    Media.movie = function(id, fn) {
      var dfd;
      if (fn == null) {
        fn = null;
      }
      dfd = Media.api.send('VideoLibrary.GetMovieDetails', {
        movieid: id,
        properties: ['title', 'year', 'plotoutline', 'plot', 'thumbnail']
      });
      return dfd.then(function(data) {
        var d;
        d = Media.api.scrub(data.result.moviedetails);
        pubsub.emit('api:movie', d);
        if (fn) {
          return fn(d);
        }
      });
    };

    Media.artists = function(options, fn) {
      var args, dfd;
      if (options == null) {
        options = {};
      }
      if (fn == null) {
        fn = null;
      }
      args = {
        properties: options.properties || [],
        sort: options.sort || {},
        limits: options.limits || {}
      };
      dfd = Media.api.send('AudioLibrary.GetArtists', args);
      return dfd.then(function(data) {
        pubsub.emit('api:artists', data.result.artists);
        if (fn) {
          return fn(data);
        }
      });
    };

	Media.songs = function(options, fn) {
      var args, dfd;
      if (options == null) {
        options = {};
      }
      if (fn == null) {
        fn = null;
      }
      args = {
        properties: options.properties || [],
        sort: options.sort || {},
        limits: options.limits || {},
		filter: options.filter || {}
      };
      dfd = Media.api.send('AudioLibrary.GetSongs', args);
      return dfd.then(function(data) {
        pubsub.emit('api:songs', data.result.songs);
        if (fn) {
          return fn(data);
        }
      });
    };
    Media.song = function(id, fn) {
      var dfd;
      if (fn == null) {
        fn = null;
      }
      dfd = Media.api.send('AudioLibrary.GetSongDetails', {
        songid: id,
		"properties": ['title','artist','file']
      });
      return dfd.then(function(data) {
        var d;
        d = Media.api.scrub(data.result.songdetails);
		console.log(data.result.songdetails);
        pubsub.emit('api:song', d);
        if (fn) {
          return fn(d);
        }
      });
    };

    return Media;

  }).call(this);

  module.exports = Media;

}).call(this);
